// O Set em JavaScript Ã© uma estrutura de dados que permite armazenar valores Ãºnicos de qualquer tipo, seja primitivo ou objeto.

// ðŸ“Œ CaracterÃ­sticas do Set:
// Valores Ãšnicos: NÃ£o permite valores duplicados.
// IterÃ¡vel: Pode ser percorrido com forEach, for...of ou transformado em array.
// Tamanho DinÃ¢mico: O tamanho do Set pode ser obtido com .size.
// MÃ©todos de AdiÃ§Ã£o, RemoÃ§Ã£o e Consulta: Possui mÃ©todos para adicionar (add), remover (delete), verificar (has) e limpar (clear) valores.

// Quando usar Set?
// Quando precisar armazenar apenas valores Ãºnicos.
// Quando a ordem dos elementos nÃ£o for uma prioridade.
// Para melhorar a performance ao verificar existÃªncia de valores (has Ã© mais rÃ¡pido que includes de um array grande).

const numeros = new Set([1, 2, 3, 4, 4, 5]);
console.log(numeros); // Set { 1, 2, 3, 4, 5 } -> O nÃºmero 4 duplicado Ã© ignorado

const cores = new Set();
cores.add("vermelho");
cores.add("azul");
cores.add("verde");
cores.add("vermelho"); // Ignorado, pois jÃ¡ existe
console.log(cores); // Set { 'vermelho', 'azul', 'verde' }


cores.delete("azul");
console.log(cores); // Set { 'vermelho', 'verde' }


console.log(cores.has("verde")); // true
console.log(cores.has("azul"));  // false


console.log(cores.size); // 2


cores.clear();
console.log(cores.size); // 0


// ---------------------------------------

const linguagens = new Set(["JavaScript", "Python", "Java"]);

for (const linguagem of linguagens) {
    console.log(linguagem);
}
// SaÃ­da:
// JavaScript
// Python
// Java


linguagens.forEach(ling => console.log(ling));


